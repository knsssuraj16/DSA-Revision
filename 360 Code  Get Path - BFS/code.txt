#include<bits/stdc++.h>
using namespace std;

   vector<vector<int>> makeGraph(int v,int e){
          vector<vector<int>> graph(v,vector<int>(v,0));
       for(int i =0; i<e; i++){
       		int a,b;
			cin >> a>> b;
           	graph[a][b] = 1;
           	graph[b][a]= 1;
           
       }
     
       return graph;
   }

 
    vector<int> dfs(int st,int en,vector<vector<int>> &graph, vector<bool> &visited){
         vector<int> ans;
         
 
        
        queue<pair<int,vector<int>>> q;
        ans.push_back(st);
          visited[st] = true;
        q.push(make_pair(st,ans));
        while(q.size() > 0){
            int n = q.size();
            
            for(int i =0; i< n; i++){
               pair<int,vector<int>> loc = q.front();
                ans = loc.second;
                q.pop();
                if(loc.first == en){
                    return ans;
                }
             
            	for(int i=0; i<graph.size(); i++){
                    if(graph[loc.first][i] == 1 && !visited[i] ){
                        ans.push_back(i);
                        // cout << "loc "<<i<<endl;
                        
                        visited[i] = true;
                        q.push(make_pair(i,ans));
                        ans.pop_back();
                    }
                }
            }
        }
         vector<int> lco;
        
        return lco;
    }
int main(){
    
    // write your code here
    int t;
	cin >> t;
    while(t--){
    int v,e;
        cin >> v>> e;

        vector<vector<int>> graph = makeGraph(v,e); 

        int st,en;
        cin >> st >>en;
        if(st== en){
            cout << st;
        }

        vector<bool> visited(v,false);

        vector<int> ans = dfs(st,en,graph,visited);

        for(int i = ans.size()-1; i>=0; i--){
            cout << ans[i] <<" ";
        }
        cout << endl;
        }
    return 0;
}