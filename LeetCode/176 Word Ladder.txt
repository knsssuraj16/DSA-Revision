class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        queue<string> q;
        q.push(beginWord);
        unordered_map<string,bool> visited;
        
        for(int i =0; i<wordList.size(); i++){
            visited[wordList[i]]= false;
        }

        int count = 0;
        while(q.size() > 0){
            int n = q.size();
            count++;
                for(int z =0; z< n; z++){
                string s = q.front();
                q.pop();
                
                    if(s == endWord){
                        return count;
                    }
                for(int i = 0 ; i<s.size(); i++){
                    string temp = s;
                   for(int j ='a'; j<='z'; j++){
                       temp[i] = j;
                       // cout << s <<" "<< temp<<endl;
                       if(visited.find(temp) != visited.end() && visited[temp] == false ){
                           visited[temp]= true;
                           q.push(temp);
                       }
                  }  
                 }
            }
            
        }
        return 0;
    }
};