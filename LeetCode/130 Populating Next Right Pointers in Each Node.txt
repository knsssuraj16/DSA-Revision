/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node *helper(Node * root){
        if(root== NULL){
            return NULL;
        }
        queue<Node*> q;
        q.push(root);
        
        while(q.size() > 0){
            
            int n = q.size();
            
            Node * last = NULL;
            for(int i =0; i< n; i++){
                
                Node *temp = q.front();
                q.pop();
                temp->next = last;
                last = temp;
                if(temp->right != NULL){
                    q.push(temp->right);
                    q.push(temp->left);
                }
            }
           
            
        }
        return root;
    }
    Node* connect(Node* root) {
        return helper(root);
    }
};