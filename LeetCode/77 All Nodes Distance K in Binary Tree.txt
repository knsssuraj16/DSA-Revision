/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
     void setParent(TreeNode * root,unordered_map<TreeNode * ,TreeNode *> &parent){
         
         queue<TreeNode* > q;
         q.push(root);
         
         while(q.size()> 0){
             TreeNode* temp = q.front();
             q.pop();
             
            if(temp->left) {
                parent[temp->left] = temp;
                q.push(temp->left);
            }
             if(temp->right) {
                parent[temp->right] = temp;
                q.push(temp->right);
            }
         }
         
     }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode * ,TreeNode* > parent;
        unordered_map<TreeNode * ,bool > visited;
        
        setParent(root,parent);
        
        int counter =0;
        queue<TreeNode *> q;
        q.push(target);
        visited[target] = true;
        while(q.size() > 0){
            if(counter == k) break;
            counter++;
            int size = q.size();
            for(int i =0 ; i< size; i++){
               TreeNode * temp = q.front();
                q.pop();
                
                if(temp->left&& visited.find(temp->left) == visited.end()) {
                    q.push(temp->left);
                         visited[temp ->left] = true;
                }
                
                if(temp ->right && visited.find(temp->right) == visited.end()) {
                    q.push(temp->right);
                      visited[temp ->right] = true;}
                
                if(parent[temp] &&  visited.find(parent[temp]) == visited.end() ){
                    q.push(parent[temp]);
                    visited[parent[temp]] = true;
                }
            }
        }
        
        vector<int> re ;
        
        while(q.size() > 0){
            TreeNode * temp= q.front();
            re.push_back(temp->val);
            q.pop();
        }
        return re;
    }
    
    
    
    
    
    
    
    
};