/************************************************************

    Following is the Binary Tree node structure

    class BinaryTreeNode 
    {
        public : 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) 
        {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/

#include<bits/stdc++.h> 

void setParent(unordered_map <BinaryTreeNode<int>*,BinaryTreeNode<int>*> & parent,BinaryTreeNode<int>* root,int start,BinaryTreeNode<int>* &startNode){
   
    queue<BinaryTreeNode<int>*> q;
    q.push(root);
    
    while(q.size()> 0){
        int size = q.size();
       
        for(int i =0; i< size;i++){
             BinaryTreeNode<int>*  node = q.front();
            q.pop();
            if(node->data == start) startNode = node;
        		
            	if(node->left){
                    parent[node->left] = node;
                	q.push(node->left);
                }
            	if(node->right){
                    parent[node->right] = node;
                    q.push(node->right);
                }
                    
        }
            
    }
}

int timeToBurnTree(BinaryTreeNode<int>* root, int start)
{
    unordered_map <BinaryTreeNode<int>*,BinaryTreeNode<int>*> parent;
    unordered_map <BinaryTreeNode<int>*,bool> visited;
    
    BinaryTreeNode<int>* startNode;
    setParent(parent,root,start,startNode);
    
    queue<BinaryTreeNode<int>*> q;
    q.push(startNode);
    visited[startNode] = true;
    
    int minute =0;
    while(q.size()> 0){
        int size = q.size();
      
        bool check =false ;
        for(int i =0 ;i< size; i++){
             BinaryTreeNode<int>*  node = q.front();
           	 q.pop();
        		
            	if(node->left && !visited[node->left]){
                    check= true;
                	q.push(node->left);
                    visited[node->left] = true;
                }
            	if(node->right && !visited[node->right]){
                    
                    check= true;
                    q.push(node->right);
                    visited[node->right]= true;
                }
            	if( parent[node] && !visited[parent[node]]){
                    
                    check= true;
                    q.push(parent[node]);
                    visited[parent[node]] = true;
                }
        }
        if(check)
          minute++;
    }
    
    return minute;
    // Write your code here
}




