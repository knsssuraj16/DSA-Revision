/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    TreeNode * solve(vector<int>& in,int stin,int sten, vector<int>& post,int stpos,int enpos, unordered_map <int, int> &mp){
        
        if(stpos > enpos || stin> sten) return NULL;
        
        TreeNode * root = new TreeNode(post[enpos]);
        
        int rootidx = mp[post[enpos]];
        int size  = rootidx- stin;
        
        root-> left = solve(in,stin,rootidx-1,
                            post,stpos,stpos+size-1,mp);
        
        root-> right = solve(in,rootidx+1,sten,
                            post,stpos+size,enpos -1,mp);
        
        
        
        return root;
        
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        unordered_map <int, int> mp ;
        for(int i =0; i< inorder.size(); i++){
            mp[inorder[i]] = i;
            
        }
        
        return solve(inorder,0,inorder.size()-1, postorder,0,postorder.size()-1,mp);
    }
};