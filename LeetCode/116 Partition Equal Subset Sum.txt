class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int sum = accumulate(nums.begin(),nums.end(),0);
        if(sum&1) return 0;
        vector<unordered_map<int,bool>> mem(nums.size());
        return dfs(0,sum>>1,nums,mem);
    }
    bool dfs(int p, int sum, vector<int>& nums, vector<unordered_map<int,bool>>& mem) {
        if(!sum) return 1;
        if(sum<0 || p==nums.size()) return 0;
        auto it = mem[p].find(sum);
        if(it!=mem[p].end()) return it->second;
        return mem[p][sum]=dfs(p+1,sum,nums,mem)||dfs(p+1,sum-nums[p],nums,mem);
    }
};