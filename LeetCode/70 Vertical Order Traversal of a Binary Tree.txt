/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    vector<vector<int>> verticalTraversal(TreeNode* root) {
        
       map<int,map<int,multiset<int>>> mp;
        
        
        queue<pair<int,pair<int ,TreeNode *>>> q;
        q.push({0,{0,root}});
        
        while(q.size() > 0){
            
            auto a = q.front();
            q.pop();
            TreeNode * node = a.second.second;
            int x= a.first;
            int y = a.second.first;
            
            mp[x][y].insert(node->val);
            
            if(node->left != NULL){
                q.push({x-1,{y+1,node->left}});
            }
            
             if(node->right != NULL){
                  q.push({x+1,{y+1,node->right}});
            }
            
            
        }
        
         vector<vector<int>> res ;
        
        for(auto a: mp){
            
            vector<int>locRes;
            for(auto b: a.second){
                locRes.insert(locRes.end(),b.second.begin(),b.second.end());
            }
            res.push_back(locRes);
        }
        
        return res;
    }
};