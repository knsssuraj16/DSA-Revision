/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode * MergeTwoLL(ListNode *left, ListNode * right){
        ListNode * head = new ListNode(0) ;
        ListNode *temp= head;
        while(left != NULL && right != NULL){
            if(left->val < right->val){
                temp->next = left;
                left = left->next;
            }else{
                  temp->next = right;
                   right = right->next;
            }
            temp= temp->next;
        
        }
        if(left != NULL)
        temp->next = left;
        if(right != NULL)
        temp->next = right;
        
        return head->next;
          
        
    }
    ListNode * divCon(int start,int end ,vector<ListNode*>& lists){
        if(start == end){
            return lists[start];
        }
        int mid = (start + end)/2;
        
        ListNode* left = divCon(start,mid,lists);
        ListNode* right = divCon(mid+1,end,lists);
        
        return MergeTwoLL(left,right);
        
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
      
        if(lists.size()== 0){
            return NULL;
        }
        
        return divCon(0,lists.size()-1,lists);
        
    }
};