class Solution {
public:
    

    int helper(vector<int>& arr, int l, int r,  vector<vector<int>> & dp){
       
      if(l == r) return 0;
        
        if(dp[l][r] != -1){
            return dp[l][r];
        }
        int res = 0;
        for(int i = l; i < r; i++){
         
                
                 int temp = (arr[l-1] * arr[i] * arr[r]);
                    // cout << temp<<endl;
                 int loc  =  temp + helper(arr,l,i,dp) + helper(arr,i+1,r,dp);
                res =max(res,loc);
        
        }
        dp[l][r] = res;
        
        return res;
    }
    int maxCoins(vector<int>& nums) {
        
        nums.insert(nums.begin() ,1);
        nums.push_back(1);
        int n = nums.size();
        
        vector<vector<int>> dp (n,vector<int> (n,-1));
        return helper(nums, 1,n-1,dp);
    }
};