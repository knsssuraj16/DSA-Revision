
class Trie{
    public:
        Trie* children[26];
        bool isEnd = false;
        
    };
class WordDictionary {
    
public:
    
    
    Trie* root;
        
    void add(string word){
        Trie* temp = root;
        for(int i =0; i<word.length(); i++){
              if(temp->children[word[i]-'a']  == NULL){
                  temp->children[word[i]-'a'] = new Trie();
              } 
            temp = temp->children[word[i]-'a'];
         }
        temp->isEnd =true;
    }
     
    bool searchRecur(string word,int a,Trie* temp){
        if(temp == NULL){
            return false;
        }
        if(a == word.length()){
            return temp->isEnd;
        }
        
        if(word[a] == '.'){
            for(int i=0; i<25; i++){
                if(searchRecur(word,a+1,temp->children[i])){
                    return true;
                }
            }
        }
        else{
            if(searchRecur(word,a+1,temp->children[word[a] -'a'])){
                return true;
            }
        }
        return false;
    }
    

    
    
    WordDictionary() {
        root = new Trie();
    }
    
    void addWord(string word) {
        add(word);
    }
   
    
    bool search(string word) {
      
        return searchRecur(word,0,root);
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */