/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode * merge(TreeNode *  left,TreeNode * right){
        if(!left){
            return right;
        } 
        if(!right){
            return left;
        }
        if(left->val > right->val){
            left->left=   merge(left->left,right);
        }else { 
            left->right= merge(left->right,right);
        }
        return left;
        
    }
      TreeNode* helper(TreeNode* root,int key){
        if(!root) return NULL;
       
         if(key < root->val){
              
              root->left = helper(root->left,key);
          }else if(key > root->val){
              
             root->right = helper(root->right,key);
          }else{
             if(root->left == NULL && root->right ==NULL){
                 return NULL;
             }else if(!root->left){
                 return root->right;
             }else if(!root->right){
                 return root->left;
             }else{
                 
                 root = merge(root->left,root->right);
             }
             
          }
        
        return root;
       
        
    }
    TreeNode* deleteNode(TreeNode* root, int key) {
            
        return helper(root,key);
    }
};