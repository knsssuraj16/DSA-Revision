/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode * reverse(ListNode * head){
        ListNode * pre = NULL;
        ListNode * curr = head;
        
        while(curr != NULL){
            ListNode * next = curr->next;
            curr->next = pre;
            pre = curr;
            curr = next;
        }
        
        return pre;
        
    }
    bool isPalindrome(ListNode* head) {
        if(head->next ==NULL|| head == NULL){
            return true;
        }
        
        //find middle of this linked list 
        
        ListNode *slow= head;
        ListNode *fast = head;
        
        while(fast->next != NULL && fast->next->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        
        // reverse Linled List
        slow->next = reverse(slow->next);
        slow= slow->next;
        
        while(slow != NULL){
            
            if(head->val != slow->val){
                return false;
            }
            head= head->next;
            slow = slow->next;
            
            
        }
        
        return true;
        
        
    }
};