/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    TreeNode* solve(vector<int>& pre,int stpre,int enpre, vector<int>& ino,int stin,int enin, unordered_map <int,int>& mp){
        
        if(stpre>enpre || stin > enin ){
            return NULL;
        }
        
        TreeNode * root = new TreeNode(pre[stpre]);
        int inoidx = mp[pre[stpre]];
        int size = inoidx - stin;
        
        root->left = solve(pre,stpre+1,stpre+size, ino,stin,inoidx -1, mp);
        
        root->right = solve(pre,stpre+size+1,enpre, ino,inoidx+1,enin, mp);
        
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
         
        unordered_map <int,int> mp;
        for(int i=0; i< inorder.size();i++){
            mp[inorder[i]] = i;
        }
        
        TreeNode * root = solve(preorder,0,preorder.size()-1, inorder,0,inorder.size()-1, mp);
        
        return root;
       
    }
};