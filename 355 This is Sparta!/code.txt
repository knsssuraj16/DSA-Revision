#include<bits/stdc++.h>
using namespace std;
struct war{
    int str;
    int cow;
};
int check(int i,int j,vector<war> &arr){
    if(i == arr.size()){
        return j;
    }
    
    if(j == arr.size()){
        return i;
    }
    
    if(arr[i].str > arr[j].str){
        return i;
    }else if (arr[i].str < arr[j].str){
         return j;
    }else{
        if(arr[i].cow < arr[j].cow){
        	return i;
        }else if (arr[i].cow > arr[j].cow){
             return j;
    	}	else{
            return i;
        }
    }
}

void buildTree(vector<war> &arr,vector<int> &tree,int start,int end,int treeNode){
    if(start == end){
     	tree[treeNode]=start ;
        return;
    }
    
    int mid = (start + end)/2;
     buildTree(arr,tree,start,mid,treeNode*2);
     buildTree(arr,tree,mid+1,end,treeNode*2+1);
    tree[treeNode] = check(tree[treeNode*2],tree[treeNode*2+1],arr);
    
}

int query(vector<int> &tree, vector<war>& arr,int start ,int end, int treeNode,int left ,int right){
    //complete inside 
    
    
    //complete outside
    if(right < start || left > end){
        return arr.size();
    }
    
    if(left <= start && right >= end){
        return tree[treeNode];
    }
    
    int mid = (start + end) /2;
    int l = query(tree,arr,start,mid,treeNode*2,left,right);
    int r = query(tree,arr,mid+1,end,treeNode*2+1,left,right);
    return check(l,r,arr);
    // partially range and 
}

int main(){
    
    // write your code here
    int n;
    cin >> n;
    vector<war> arr(n);
    for(int i =0;i< n; i++){
        cin >> arr[i].str;
    }
    for(int i =0;i< n; i++){
        cin >> arr[i].cow;
    }
    
    vector<int> tree(4*n);
    buildTree(arr,tree,0,n-1,1);
    int q;
    
    cin >> q;
    
    while(q--){
        int i,j;
        cin >> i>> j;
        cout <<( query(tree,arr,0,n-1,1,i-1,j-1) +1)<<endl;	
    }
    return 0;
}